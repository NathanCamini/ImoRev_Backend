generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @unique @default(autoincrement())
  email    String   @unique
  password String
  Profile  Profile?

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  @@map("user")
}

model Profile {
  id                    Int             @unique @default(autoincrement())
  telefone              String
  email                 String          @unique
  genero                String
  estadocivil           String
  dataNascimento        DateTime
  nomeCompleto          String
  role                  ROLE
  enderecoId            Int
  // endereco              Adress         @relation(fields: [enderecoId], references: [id])
  imagem                String?
  // imoveis               Properties[]   @relation("ImoveisUsuario")
  documentos            Documents[]     @relation("DocumentosUsuario")
  notificacoesEnviadas  Notifications[] @relation("NotificacoesEnviadas")
  notificacoesRecebidas Notifications[] @relation("NotificacoesRecebidas")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  @@id([id, userId])
  @@map("profile")
}

model Documents {
  id              Int           @unique @default(autoincrement())
  tipo            TYPEDOCUMENTS
  numero          String        @unique
  ProfileId       Int
  ProfileRelation Profile       @relation("DocumentosUsuario", fields: [ProfileId], references: [id])
  created_at      DateTime      @default(now())
  updated_at      DateTime?     @updatedAt

  @@id([id, ProfileId])
  @@map("documents")
}

model Adress {
  id          Int          @id @default(autoincrement())
  rua         String
  numero      Int
  complemento String?
  cidade      String
  bairro      String
  uf          String
  cep         String
  // profile     Profile[]
  // Imoveis     Properties[]
  created_at  DateTime     @default(now())
  updated_at  DateTime?    @updatedAt

  @@map("adress")
}

model Properties {
  id             Int               @unique @default(autoincrement())
  // enderecoId     Int
  // endereco       Adress            @relation(fields: [enderecoId], references: [id])
  tipo           TYPEPROPERTY
  valorAvaliacao Float
  valorAluguel   Float
  imagens        ImageProperties[] @relation("ImagensDoImovel")
  // profile        Profile[]           @relation("ImoveisUsuario", fields: [ProfileId], references: [id])
  // ProfileId      Int
  created_at     DateTime          @default(now())
  updated_at     DateTime?         @updatedAt

  // @@id([id, enderecoId])
  @@id([id])
  @@map("properties")
}

model ImageProperties {
  id         Int        @default(autoincrement())
  link       String
  imovel     Properties @relation("ImagensDoImovel", fields: [imovelId], references: [id])
  imovelId   Int
  created_at DateTime   @default(now())
  updated_at DateTime?  @updatedAt

  @@id([id, imovelId])
  @@map("image_properties")
}

model Notifications {
  id             Int       @default(autoincrement())
  remetenteId    Int
  destinatarioId Int
  mensagem       String
  lida           Boolean   @default(false)
  created_at     DateTime  @default(now())
  updated_at     DateTime? @updatedAt

  remetente    Profile @relation("NotificacoesEnviadas", fields: [remetenteId], references: [id])
  destinatario Profile @relation("NotificacoesRecebidas", fields: [destinatarioId], references: [id])

  @@id([id, remetenteId, destinatarioId])
  @@map("notifications")
}

enum ROLE {
  ADMIN
  IMOBILIARIA
  LOCADOR
  LOCATARIO
}

enum TYPEDOCUMENTS {
  CPF
  CNPJ
}

enum TYPEPROPERTY {
  CASA
  APARTAMENTO
  TERRENO
  COMERCIAL
}
